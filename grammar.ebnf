Module = {Declaration}, ? EOI ? ;

Declaration = StructDecl | FunctionDef;

FunctionDef = "func", Identifier, "(", FuncDefParamList, ")", [":", Type] "{", {Statement},
    "}";

FuncDefParamList = [ ParamSet, {",", ParamSet} ];

ParamSet = ParamIdentifierList, ":", Type;

ParamIdentifierList = Identifier, {",", Identifier};

StructDecl = "struct", Identifier, "{", {StructField}, "}";

StructField = Identifier, ":", Type, ";";


Statement = "{", {Statement}, "}" 
          | "while", "(", Expression, ")", Statement
          | LValue, "=", Expression, ";"
          | Identifier, "[", Expression, "]", "=", Expression, ";"
          | "if", "(", Expression, ")", Statement
          | FunctionCall, ";"
          | "return", [Expression], ";";


FunctionCall = Identifier, "(", FuncCallArgList, ")";

FuncCallArgList = [ Expression, {",", Expression} ];

/*
  Note that we only need to support Identifier.Identifier and not an arbitrary
  number of .field, like a.b.c = 2 or a    .b.c.d = 2; That is because structs
  and arrays are always references, i.e. pointers. So, the above can be achieved
  as: B b = a.b;  // This is a pointer - any change to this will be reflected to
  a.b b.c = 2; For the same reason, we don't need to support something like:
  a.b[2] = 3;
  because we can achieve that as:
  Arr arr = a.b;  // arr is a pointer under the hood - any change to its
  elements will be reflected to a.b arr = a.b;
*/
LValue = Identifier, [ ".", Identifier ];

Expression = ExpressionTerm 
           | "(", Expression, ")"
           | FunctionCall
           | "!", Expression
           | ExpressionTerm, "[", ExpressionTerm, "]"
           | ExpressionTerm, InfixBinOp, ExpressionTerm;

InfixBinOp = "+" | "-" | "*" | "/" | "%" | "&&" | "||" | "<" | "=<"| ">" | ">="| "=="| "!=";


ExpressionTerm = Integer
               | Identifier 
               | "true" 
               | "false" 
               | "new", "int", "[", Expression,"]";


Type = "int"
     | "int", "[", "]"
     | "bool"
     | Identifier;


Integer = ? INTEGER_LITERAL ?;
Identifier = ? IDENTIFIER ? ;
